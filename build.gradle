import dex.plugins.outlet.v2.util.ReleaseType

plugins {
	id 'fabric-loom' version '1.9-SNAPSHOT' apply false
	id 'io.github.dexman545.outlet' version '1.6.1' apply false
	id 'com.modrinth.minotaur' version '2.+' apply false
	id 'maven-publish'
}

ext {
	debugVersion = System.currentTimeMillis()
}

allprojects {
	group = "top.offsetmonkey538.meshlib"
}

subprojects {
	apply plugin: "maven-publish"
	apply plugin: "java"
	apply plugin: "java-library"

	archivesBaseName = "mesh-lib-${project.nameSuffix}"
	version = "${rootProject.mod_version}+${rootProject.minecraft_version}"

	tasks.named("javadoc", Javadoc) {
		options.addFileOption('-add-stylesheet', rootProject.file("javadoc-stylesheet.css"))
	}

	java {
		withSourcesJar()
		withJavadocJar()
	}

	jar {
		from("${rootProject.projectDir}/LICENSE") {
			rename { "${it}" }
		}
	}

	dependencies {
		compileOnly "org.jetbrains:annotations:24.0.0"
		compileOnly "org.slf4j:slf4j-api:2.0.16"
	}

	publishing {
		repositories {
			maven {
				name = "OffsetMonkey538"
				url = "https://maven.offsetmonkey538.top/releases"
				credentials {
					username = providers.gradleProperty("OffsetMonkey538Username").getOrElse(System.getenv("MAVEN_USERNAME"))
					password = providers.gradleProperty("OffsetMonkey538Password").getOrElse(System.getenv("MAVEN_PASSWORD"))
				}
				authentication {
					basic(BasicAuthentication)
				}
			}
		}
		publications {
			maven(MavenPublication) {
				artifactId = project.archivesBaseName

				from(components["java"])
			}
		}
	}
	tasks.publishMavenPublicationToMavenLocal.doLast {
		if (System.getenv("IS_DEBUG") == "true") System.out.println("Version: " + version)
	}
}

configure(subprojects.findAll { it.name != "common" }) {
	apply plugin: 'com.modrinth.minotaur'
	apply plugin: 'io.github.dexman545.outlet'

	if (System.getenv("IS_DEBUG") == "true") version = "${version}-${rootProject.debugVersion}"

	outlet {
		mcVersionRange = rootProject.supported_minecraft_versions
		allowedReleaseTypes = Set.of(ReleaseType.RELEASE)
	}

	modrinth {
		token = System.getenv("MODRINTH_TOKEN")
		projectId = "mesh-lib"
		def customVersionName = System.getenv("VERSION_NAME")
		if (customVersionName != null) versionName = customVersionName
		versionNumber = "${project.version}"
		versionType = "alpha"
		def isPreRelease = System.getenv("VERSION_IS_PRERELEASE")
		versionType = !"false".equals(isPreRelease) ? "beta" : "release"
		additionalFiles = [sourcesJar.archiveFile]
		gameVersions = outlet.mcVersions()
		syncBodyFrom = rootProject.file("README.md").text
		def changelogEnv = System.getenv("VERSION_CHANGELOG")
		if (changelogEnv != null) changelog = changelogEnv
	}

	tasks.modrinth.dependsOn(tasks.modrinthSyncBody)
}
